/*
 *  ==++++++++++++++++++++++++++++++++++++++++++++++++++++==
 *  |      CENTRAL PHILIPPINE UNIVERSITY                   |
 *  |      Bachelor of Science in Software Engineering     |
 *  |      Jaro, Iloilo City, Philippines                  |
 *  |                                                      |
 *  |          This program is written by Rave, Â©2015.     |
 *  |          You are free to use and distribute this.    |
 *  |          Reach me at: admin@blackout.biz.tm          |
 *  |                                                      |
 *  |               ~~~"CODE the FUTURE"~~~                |
 *  ==++++++++++++++++++++++++++++++++++++++++++++++++++++==
 */
package com.midpaint.interfaces;

import com.midpaint.objects.Canvas;
import com.midpaint.objects.Ellipse;
import com.midpaint.objects.Shape;
import com.midpaint.objects.Square;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

/**
 *
 * @author Rave Noren Gidor-Sambo Villavicencio-Arevalo
 */
public class CanvasPanel extends javax.swing.JPanel {

    private Canvas canvas = new Canvas();
    private Random random = new Random();

    /**
     * Creates new form CanvasPanel
     */
    public CanvasPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 476, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 352, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        canvas.setSelectedShape(null);

        for (Shape shape : canvas.getShapes()) {
            if (shape.contains(evt.getX(), evt.getY())) {
                canvas.setSelectedShape(shape);                
                System.out.println("Shape selected");
            } else {
                System.out.println("No shape selected");
            }
        }
        
        repaint();
    }//GEN-LAST:event_formMouseClicked

    @Override
    public void paint(Graphics g) {
        super.paint(g);
        for (Shape shape : canvas.getShapes()) {
            shape.draw(g);
        }

        if (canvas.getSelectedShape() != null) {
            final int SQUARE_SIZE = 8;
            final int HALF_SQUARE_SIZE = SQUARE_SIZE / 2;

            int x = canvas.getSelectedShape().getX();
            int y = canvas.getSelectedShape().getY();
            int width = canvas.getSelectedShape().getWidth();
            int height = canvas.getSelectedShape().getHeight();

            List<Point> points = new ArrayList<>();
            points.add(new Point(x - HALF_SQUARE_SIZE, y - HALF_SQUARE_SIZE)); // NW
            points.add(new Point(x + (width / 2) - HALF_SQUARE_SIZE, y - HALF_SQUARE_SIZE)); // N
            points.add(new Point(x + width - HALF_SQUARE_SIZE, y - HALF_SQUARE_SIZE)); // NE

            points.add(new Point(x - HALF_SQUARE_SIZE, y + (height / 2) - HALF_SQUARE_SIZE)); // E
            points.add(new Point(x + width - HALF_SQUARE_SIZE, y + (height / 2) - HALF_SQUARE_SIZE)); // W

            points.add(new Point(x - HALF_SQUARE_SIZE, y + height - HALF_SQUARE_SIZE)); // SW
            points.add(new Point(x + (width / 2) - HALF_SQUARE_SIZE, y + (height) - HALF_SQUARE_SIZE)); // S
            points.add(new Point(x + width - HALF_SQUARE_SIZE, y + height - HALF_SQUARE_SIZE)); // SE                

            g.setColor(Color.BLACK);
            for (Point point : points) {
                g.fillRect(point.x, point.y, SQUARE_SIZE, SQUARE_SIZE);
            }
        }
    }

    public void addEllipse() {
        Ellipse ellipse = new Ellipse(random.nextInt(getWidth() - Shape.PRIMARY_SIZE),
                random.nextInt(getHeight() - Shape.PRIMARY_SIZE),
                Shape.PRIMARY_SIZE,
                Shape.PRIMARY_SIZE
        );

        canvas.addShape(ellipse);

        repaint();
    }
    
    public void addSquare() {
        Square square = new Square(random.nextInt(getWidth() - Shape.PRIMARY_SIZE),
                random.nextInt(getHeight() - Shape.PRIMARY_SIZE),
                Shape.PRIMARY_SIZE,
                Shape.PRIMARY_SIZE);
        canvas.addShape(square);
        repaint();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
